#!/usr/bin/env python3

import sys
import os
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.extend((os.path.join(myBinDir, "../lib"),
                os.path.expanduser("~markd/compbio/code/pycbio/lib")))
from collections import defaultdict
from dataclasses import dataclass
from pycbio.sys import fileOps
from gencode import gencodeGxfParserFactory
from gencode.gencodeGxfParser import ParseException, GxfValidateException, GxfRecordValidator
from gencode.biotypes import BioType, getTranscriptFunction

def parseArgs():
    desc = """Extract attributes from a GENCODE GTF or GFF3 into a tab-separate file for
use by other programs."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--debug", action="store_true",
                        help="""print stack trace on all error""")
    parser.add_argument("gencodeGxf",
                        help="""GENCODE GTF or GFF3 file""")
    parser.add_argument("attrsTsv",
                        help="""write attributes to this TSV file""")
    return parser.parse_args()


def emptyIfNone(v):
    return v if v is not None else ""

@dataclass
class Transcript:
    """attributes collect from one transcript"""
    transcriptId: str
    transcriptName: str
    transcriptType: str
    geneId: str
    geneName: str
    geneType: str
    source: str
    havanaGeneId: str
    havanaTranscriptId: str
    ccdsId: str
    level: int
    transcriptSupportLevel: str
    proteinId: str
    tags: set

class GencodeGxfToAttrs(object):
    def __init__(self, gxfParser):
        self.gxfParser = gxfParser
        self.recValidator = GxfRecordValidator(sys.stderr)
        self.errorCnt = 0
        self.unknownGeneTypes = set()
        self.unknownTranscriptTypes = set()
        self.geneTags = defaultdict(set)  # collect gene tags
        self.transcripts = {}

    def _processGeneRec(self, rec):
        geneTags = self.geneTags[rec.attributes.gene_id]
        for tag in rec.attributes.tags:
            geneTags.add(tag)

    def _processTransRec(self, rec):
        attrs = rec.attributes
        trans = self.transcripts.get(attrs.transcript_id)
        if trans is None:
            trans = Transcript(transcriptId=attrs.transcript_id,
                               transcriptName=attrs.transcript_name,
                               transcriptType=attrs.transcript_type,
                               geneId=attrs.gene_id,
                               geneName=attrs.gene_name,
                               geneType=attrs.gene_type,
                               source=rec.source,
                               havanaGeneId=attrs.havana_gene,
                               havanaTranscriptId=attrs.havana_transcript,
                               ccdsId=attrs.ccdsid,
                               level=attrs.level,
                               transcriptSupportLevel=attrs.transcript_support_level,
                               proteinId=attrs.protein_id,
                               tags=set())
            self.transcripts[attrs.transcript_id] = trans
        # due to PAR, we have to handle multiple tags for the same
        # transcript_id, which might be different (mainly the PAR tag), so
        # always add
        for tag in attrs.tags:
            trans.tags.add(tag)

    def _processRec(self, rec):
        try:
            self.recValidator.validate(rec)
            if rec.feature == "gene":
                self._processGeneRec(rec)
            elif rec.feature == "transcript":
                self._processTransRec(rec)
        except ParseException as ex:
            sys.stderr.write("Error: {}: {}\n".format(str(ex), rec))
            self.errorCnt += 1

    def _mergeGeneTags(self):
        for trans in self.transcripts.values():
            trans.tags |= self.geneTags[trans.geneId]

    def _assignFunction(self, trans):
        trans.transcriptClass = getTranscriptFunction(BioType(trans.geneType),
                                                      BioType(trans.transcriptType))

    def _assignFunctions(self):
        for trans in self.transcripts.values():
            self._assignFunction(trans)

    def parse(self):
        for rec in self.gxfParser.reader():
            self._processRec(rec)
            if self.errorCnt >= 100:
                break
        if self.errorCnt > 0:
            raise Exception("{} parse errors in {}".format(self.errorCnt, self.gxfParser.getFileName()))
        self.recValidator.reportErrors()
        self._mergeGeneTags()
        self._assignFunctions()

    @staticmethod
    def _writeAttrsTsvRow(tr, fh):
        fileOps.prRowv(fh, tr.geneId, tr.geneName, tr.geneType,
                       tr.transcriptId, tr.transcriptName, tr.transcriptType,
                       tr.source, tr.havanaGeneId, tr.havanaTranscriptId,
                       emptyIfNone(tr.ccdsId), tr.level,
                       tr.transcriptClass, emptyIfNone(tr.proteinId),
                       tr.transcriptSupportLevel,
                       ",".join(map(str, sorted(tr.tags))))

    def writeAttrsTsv(self, fh):
        fileOps.prRowv(fh, "geneId", "geneName", "geneType",
                       "transcriptId", "transcriptName", "transcriptType",
                       "source", "havanaGeneId", "havanaTranscriptId",
                       "ccdsId", "level", "transcriptClass", "proteinId",
                       "tsl", "tags")
        for transcript in sorted(self.transcripts.values(),
                                 key=lambda t: (t.geneId, t.transcriptId)):
            self._writeAttrsTsvRow(transcript, fh)

def gencodeGxfToAttrs(opts):
    try:
        parser = GencodeGxfToAttrs(gencodeGxfParserFactory(opts.gencodeGxf, ignoreUnknownAttrs=True))
        parser.parse()
        with open(opts.attrsTsv, "w") as fh:
            parser.writeAttrsTsv(fh)
    except GxfValidateException as ex:
        if opts.debug:
            raise
        print(str(ex), file=sys.stderr)
        exit(1)



gencodeGxfToAttrs(parseArgs())

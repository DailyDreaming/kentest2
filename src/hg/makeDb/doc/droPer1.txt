# for emacs: -*- mode: sh; -*-


# Drosophila persimilis -- 
# 
# Broad's 28 Oct. 2005 assembly
#

#  NOTE:  this doc may have genePred loads that fail to include
#  the bin column.  Please correct that for the next build by adding
#  a bin column when you make any of these tables:
#
#  mysql> SELECT tableName, type FROM trackDb WHERE type LIKE "%Pred%";
#  +-------------+---------------------------------+
#  | tableName   | type                            |
#  +-------------+---------------------------------+
#  | xenoRefGene | genePred xenoRefPep xenoRefMrna |
#  | genscan     | genePred genscanPep             |
#  +-------------+---------------------------------+



# DOWNLOAD SEQUENCE (DONE 11/23/05 angie)
    ssh kkstore02
    mkdir /cluster/store11/droPer1
    cd /cluster/data
    ln -s /cluster/store11/droPer1 droPer1
    cd /cluster/data/droPer1
    mkdir jkStuff bed
    mkdir downloads
    cd downloads
    wget http://www.broad.mit.edu/ftp/pub/assemblies/insects/droPer1/assembly.agp
    wget http://www.broad.mit.edu/ftp/pub/assemblies/insects/droPer1/assembly.links
    wget http://www.broad.mit.edu/ftp/pub/assemblies/insects/droPer1/BasicAssemblyOneLiner.out
    wget http://www.broad.mit.edu/ftp/pub/assemblies/insects/droPer1/assembly.quals.gz
    wget http://www.broad.mit.edu/ftp/pub/assemblies/insects/droPer1/scaffolds.fasta
    mv scaffolds.fasta ../scaffolds.fa
    faSize ../scaffolds.fa
#188374079 bases (12790523 N's 175583556 real 175583556 upper 0 lower) in 12838 sequences in 1 files
#Total size: mean 14673.2 sd 226676.5 min 204 (super_12837) max 11822988 (super_0) median 1671
#N count: mean 996.3 sd 8496.6
#U count: mean 13676.9 sd 220220.8
#L count: mean 0.0 sd 0.0


# PARTITION SCAFFOLDS FOR REPEATMASKER RUN (DONE 11/23/05 angie)
    # Chop up large scaffolds into ~500kb chunks for RepeatMasker, 
    # then glom the tiny scaffolds up into ~500k collections (looks like 
    # some almost-500k pieces are glommed together --> a few almost-1M chunks,
    # but that's OK).
    ssh kkstore02
    cd /cluster/data/droPer1
    mkdir scaffoldsSplit
    faSplit size scaffolds.fa 500000 -oneFile \
      scaffoldsSplit -lift=jkStuff/scaffoldsSplit.lft
    mkdir chunks500k
    faSplit about scaffoldsSplit.fa 500000 chunks500k/chunk_


# CREATING DATABASE (DONE 11/23/05 angie)
    # Create the database.
    ssh hgwdev
    # Make sure there is at least 5 gig free for the database
    df -h /var/lib/mysql
#/dev/sdc1             1.8T  1.3T  371G  78% /var/lib/mysql
    hgsql '' -e 'create database droPer1'
    # Copy the table "grp" from an existing database to the new database
    hgsql droPer1 -e 'create table grp (PRIMARY KEY(NAME)) select * from dm2.grp'


# RUN REPEAT MASKER (DONE 11/23/05 angie)
    ssh kkstore02
    cat /cluster/bluearc/RepeatMasker/Libraries/version 
#RepBase Update 9.11, RM database version 20050112
    # make the run directory, output directory, and job list
    cd /cluster/data/droPer1
    cat << '_EOF_' > jkStuff/RMDrosophila
#!/bin/csh -fe

cd $1
/bin/mkdir -p /tmp/droPer1/$2
/bin/cp ../chunks500k/$2 /tmp/droPer1/$2/
pushd /tmp/droPer1/$2
/cluster/bluearc/RepeatMasker/RepeatMasker -s -spec drosophila $2
popd
/bin/cp /tmp/droPer1/$2/$2.out ./
/bin/rm -fr /tmp/droPer1/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/droPer1/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/droPer1
'_EOF_'
    # << this line makes emacs coloring happy
    chmod +x jkStuff/RMDrosophila
    mkdir RMRun RMOut
    cp /dev/null RMRun/RMJobs
    foreach f ( chunks500k/*.fa )
      set chunk = $f:t
      echo ../jkStuff/RMDrosophila \
           /cluster/data/droPer1/RMOut $chunk \
           '{'check in line+ /cluster/data/droPer1/$f'}' \
         '{'check out line+ /cluster/data/droPer1/RMOut/$chunk.out'}' \
      >> RMRun/RMJobs
    end

    # do the run
    ssh kk
    cd /cluster/data/droPer1/RMRun
    para make RMJobs
    para time
#Completed: 340 of 340 jobs
#Average job time:                7476s     124.60m     2.08h    0.09d
#Longest finished job:           15242s     254.03m     4.23h    0.18d
#Submission to last job:         17795s     296.58m     4.94h    0.21d

    # Lift up the split-scaffold .out's to scaffold .out's
    ssh kkstore02
    cd /cluster/data/droPer1
    foreach f (RMOut/*.fa.out)
      liftUp $f:r:r.scaf.out jkStuff/scaffoldsSplit.lft warn $f > /dev/null
    end
    # Make a consolidated scaffold .out file too:
    head -3 RMOut/chunk_00.fa.out > RMOut/scaffolds.fa.out
    foreach f (RMOut/*.scaf.out)
      tail +4 $f >> RMOut/scaffolds.fa.out 
    end
    # Load the .out files into the database with:
    ssh hgwdev
    hgLoadOut droPer1 /cluster/data/droPer1/RMOut/scaffolds.fa.out
    # hgLoadOut made a "scaffolds_rmsk" table even with -table=rmsk, 
    # but we want a non-split with no prefix table:
    hgsql droPer1 -e 'rename table scaffolds_rmsk to rmsk'
    # Fix up the indices too:
    hgsql droPer1 -e 'drop index bin       on rmsk; \
                  drop index genoStart on rmsk; \
                  drop index genoEnd   on rmsk; \
                  create index bin       on rmsk (genoName(7), bin); \
                  create index genoStart on rmsk (genoName(7), genoStart);'


# GOLD, GAP FROM AGP (DONE 11/29/05 angie)
    ssh hgwdev
    cd /cluster/data/droPer1
    # Weird, their sequences are called "super_*" but their agp has 
    # "scaffold_*"... go with the sequence names and fix the agp.
    sed -e 's/^scaffold_/super_/' downloads/assembly.agp > ucsc.agp
    hgGoldGapGl -noGl droPer1 ucsc.agp


# SIMPLE REPEATS (TRF) (DONE 11/23/05 angie)
    ssh kolossus
    mkdir /cluster/data/droPer1/bed/simpleRepeat
    cd /cluster/data/droPer1/bed/simpleRepeat
    nice trfBig -trf=/cluster/bin/i386/trf ../../scaffolds.fa \
      /dev/null -bedAt=simpleRepeat.bed -tempDir=/tmp \
    |& egrep -v '^(Removed|Tandem|Copyright|Loading|Allocating|Initializing|Computing|Scanning|Freeing)' \
    > trf.log &
    # check on this with
    tail -f trf.log

    # Load this into the database as so
    ssh hgwdev
    hgLoadBed droPer1 simpleRepeat \
      /cluster/data/droPer1/bed/simpleRepeat/simpleRepeat.bed \
      -sqlTable=$HOME/kent/src/hg/lib/simpleRepeat.sql


# FILTER SIMPLE REPEATS (TRF) INTO MASK (DONE 11/23/05 angie)
    # make a filtered version of the trf output: 
    # keep trf's with period <= 12:
    ssh kkstore02
    cd /cluster/data/droPer1/bed/simpleRepeat
    awk '{if ($5 <= 12) print;}' simpleRepeat.bed > trfMask.bed


# MASK FA USING REPEATMASKER AND FILTERED TRF FILES (DONE 11/23/05 angie)
    ssh kkstore02
    cd /cluster/data/droPer1
    maskOutFa -soft scaffolds.fa bed/simpleRepeat/trfMask.bed \
      scaffolds.fa
    maskOutFa -softAdd scaffolds.fa RMOut/scaffolds.fa.out scaffolds.fa
    # Now clean up the unmasked split scaffolds to avoid confusion later.
    rm -r chunks500k scaffoldsSplit.fa jkStuff/scaffoldsSplit.lft


# STORE SEQUENCE AND ASSEMBLY INFORMATION (DONE 11/23/05 angie)
    # Translate to 2bit
    ssh kkstore02
    cd /cluster/data/droPer1
    faToTwoBit scaffolds.fa droPer1.2bit
    # Make chromInfo.tab.
    mkdir bed/chromInfo
    twoBitInfo droPer1.2bit stdout \
    | awk '{printf "%s\t%s\t/gbdb/droPer1/droPer1.2bit\n", $1, $2;}' \
    > bed/chromInfo/chromInfo.tab

    # Make symbolic a link from /gbdb/droPer1 to the 2bit.
    ssh hgwdev
    mkdir -p /gbdb/droPer1
    ln -s /cluster/data/droPer1/droPer1.2bit /gbdb/droPer1/
    # Load chromInfo table.
    hgsql droPer1 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql droPer1 -e 'load data local infile \
      "/cluster/data/droPer1/bed/chromInfo/chromInfo.tab" into table chromInfo'
    # Make chrom.sizes from chromInfo contents and check scaffold count.
    hgsql droPer1 -N -e 'select chrom,size from chromInfo' \
    > /cluster/data/droPer1/chrom.sizes
    wc -l /cluster/data/droPer1/chrom.sizes
#  12838 /cluster/data/droPer1/chrom.sizes


# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE (DONE 11/28/05 angie)
    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/trackDb
    cvs up -d -P

    # Edit trackDb/makefile to add droPer1 to the DBS variable.
    mkdir drosophila/droPer1
    # Create a simple drosophila/droPer1/description.html file.
    cvs add drosophila/droPer1
    cvs add drosophila/droPer1/description.html
    make update DBS=droPer1

    # go public on genome-test
    cvs ci -m "Added droPer1." makefile
    cvs ci -m "Elementary description.html for droPer1." drosophila/droPer1
    mkdir /gbdb/droPer1/html
    # in a clean, updated tree's kent/src/hg/makeDb/trackDb:
    make alpha
    # Note: genome and organism fields must correspond
    # with defaultDb values
    hgsql -h genome-testdb hgcentraltest -e \
       'INSERT INTO dbDb \
        (name, description, nibPath, organism, \
             defaultPos, active, orderKey, genome, scientificName, \
             htmlPath, hgNearOk, hgPbOk, sourceName) values \
        ("droPer1", "Oct. 2005", "/gbdb/droPer1", "D. persimilis", \
             "super_1:7109001-7125000", 1, 57, \
             "D. persimilis", \
             "Drosophila persimilis", "/gbdb/droPer1/html/description.html", \
             0, 0, "Broad 28 Oct. 2005");'
    echo 'INSERT INTO defaultDb (genome, name) values ("D. persimilis", "droPer1");' \
      | hgsql -h genome-testdb hgcentraltest
    hgsql -h genome-testdb hgcentraltest \
      -e 'INSERT INTO genomeClade (genome, clade, priority) values \
            ("D. persimilis", "insect", 55);'


# MAKE GCPERCENT (DONE 11/23/05 angie)
    ssh hgwdev
    mkdir /cluster/data/droPer1/bed/gc5Base
    cd /cluster/data/droPer1/bed/gc5Base
    hgGcPercent -wigOut -doGaps -file=stdout -win=5 -verbose=2 droPer1 \
       /cluster/data/droPer1 | wigEncode stdin gc5Base.wig gc5Base.wib
    mkdir /gbdb/droPer1/wib
    ln -s `pwd`/gc5Base.wib /gbdb/droPer1/wib
    hgLoadWiggle -pathPrefix=/gbdb/droPer1/wib droPer1 gc5Base gc5Base.wig


# PUT SEQUENCE ON /ISCRATCH FOR BLASTZ (DONE 11/23/05 angie)
    # First, agglomerate small scaffolds into chunks of ~100k median 
    # (many scaffolds are larger than that) so we don't have too many 
    # files for one dir, but keep a reasonably low job run time:
    ssh kkstore02
    cd /cluster/data/droPer1
    mkdir chunksUnsplit
    faSplit about scaffolds.fa 100000 chunksUnsplit/chunk_
    ssh kkr1u00
    mkdir /iscratch/i/droPer1
    rsync -av /cluster/data/droPer1/chunksUnsplit /iscratch/i/droPer1/
    rsync -av /cluster/data/droPer1/droPer1.2bit /iscratch/i/droPer1/
    iSync


# PRODUCING GENSCAN PREDICTIONS (DONE 11/28/05 angie)
    ssh kkstore02
    # Make hard-masked scaffolds and split up for processing:
    cd /cluster/data/droPer1
    maskOutFa scaffolds.fa hard scaffolds.fa.masked
    mkdir chunksUnsplitMasked
    faSplit about scaffolds.fa.masked 100000 chunksUnsplitMasked/chunk_
    mkdir /cluster/data/droPer1/bed/genscan
    cd /cluster/data/droPer1/bed/genscan
    # Check out hg3rdParty/genscanlinux to get latest genscan:
    cvs co hg3rdParty/genscanlinux
    # Make 3 subdirectories for genscan to put their output files in
    mkdir gtf pep subopt
    ls -1S ../../chunksUnsplitMasked/chunk*.fa > chunks.list
    cat << '_EOF_' > gsub
#LOOP
/cluster/bin/x86_64/gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << this line keeps emacs coloring happy
    ssh kki
    cd /cluster/data/droPer1/bed/genscan
    gensub2 chunks.list single gsub jobList
    para make jobList
    para time
#Completed: 537 of 537 jobs
#Average job time:                  13s       0.22m     0.00h    0.00d
#Longest finished job:             382s       6.37m     0.11h    0.00d
#Submission to last job:           601s      10.02m     0.17h    0.01d

    # If there are crashes, diagnose with "para problems".  
    # If a job crashes due to genscan running out of memory, re-run it 
    # manually with "-window=1200000" instead of "-window=2400000".
    
    # Concatenate scaffold-level results:
    ssh kkstore02
    cd /cluster/data/droPer1/bed/genscan
    cat gtf/*.gtf > genscan.gtf
    cat subopt/*.bed > genscanSubopt.bed
    cat pep/*.pep > genscan.pep
    # Clean up
    rm -r /cluster/data/droPer1/chunksUnsplitMasked

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/droPer1/bed/genscan
    ldHgGene -gtf droPer1 genscan genscan.gtf
    hgPepPred droPer1 generic genscanPep genscan.pep
    hgLoadBed droPer1 genscanSubopt genscanSubopt.bed


# MAKE DOWNLOADABLE FILES (DONE 11/23/05 angie)
    ssh kolossus
    mkdir /cluster/data/droPer1/bigZips
    cd /cluster/data/droPer1
    gzip -c RMOut/scaffolds.fa.out > bigZips/scaffoldOut.gz
    gzip -c scaffolds.fa > bigZips/scaffoldFa.gz
    gzip -c scaffolds.fa.masked > bigZips/scaffoldFaMasked.gz
    gzip -c bed/simpleRepeat/trfMask.bed > bigZips/scaffoldTrf.gz
    cd bigZips
    md5sum *.gz > md5sum.txt
    # create a README.txt
    ssh hgwdev
    mkdir /usr/local/apache/htdocs/goldenPath/droPer1
    cd /usr/local/apache/htdocs/goldenPath/droPer1
    mkdir bigZips database
    # Create README.txt files in database/ to explain the files.
    ln -s /cluster/data/droPer1/bigZips/*.{gz,txt} bigZips


# MAKE 11.OOC FILE FOR BLAT (DONE 11/28/05 angie)
    # Use -repMatch=100 (based on size -- for human we use 1024, and 
    # fly size is ~4.4% of human judging by gapless dm1 genome size from 
    # featureBits -- we would use 45, but bump that up a bit to be more 
    # conservative).
    ssh kkr1u00
    mkdir /cluster/bluearc/droPer1
    blat /cluster/data/droPer1/droPer1.2bit /dev/null /dev/null -tileSize=11 \
      -makeOoc=/cluster/bluearc/droPer1/11.ooc -repMatch=100
#Wrote 8508 overused 11-mers to /cluster/bluearc/droPer1/11.ooc
    cp -p /cluster/bluearc/droPer1/*.ooc /iscratch/i/droPer1/
    iSync


# SWAP CHAINS FROM DM2, BUILD NETS ETC. (DONE 11/29/05 angie)
    mkdir /cluster/data/droPer1/bed/blastz.dm2.swap
    cd /cluster/data/droPer1/bed/blastz.dm2.swap
    doBlastzChainNet.pl -swap /cluster/data/dm2/bed/blastz.droPer1/DEF \
      >& do.log
    echo "check /cluster/data/droPer1/bed/blastz.dm2.swap/do.log" \
    | mail -s "check do.log" $USER
    # Add {chain,net}Dm2 to trackDb.ra if necessary.


# AUTO UPDATE GENBANK INITIAL RUN (DONE 12/5/05 angie)
    # align with revised genbank process
    cd ~kent/src/makeDb/genbank
    cvs update -d etc
    # edit etc/genbank.conf to add droPer1
# droPer1 (D. persimilis)
# genbank.150.0/full has 1 mRNA and 0 ESTs at time of initial build,
# so no need to make native tracks.
droPer1.serverGenome = /cluster/data/droPer1/droPer1.2bit
droPer1.clusterGenome = /iscratch/i/droPer1/droPer1.2bit
droPer1.ooc = /iscratch/i/droPer1/11.ooc
droPer1.lift = no
droPer1.refseq.mrna.native.pslCDnaFilter  = ${lowCover.refseq.mrna.native.pslCDnaFilter}
droPer1.refseq.mrna.xeno.pslCDnaFilter    = ${lowCover.refseq.mrna.xeno.pslCDnaFilter}
droPer1.genbank.mrna.native.pslCDnaFilter = ${lowCover.genbank.mrna.native.pslCDnaFilter}
droPer1.genbank.mrna.xeno.pslCDnaFilter   = ${lowCover.genbank.mrna.xeno.pslCDnaFilter}
droPer1.genbank.est.native.pslCDnaFilter  = ${lowCover.genbank.est.native.pslCDnaFilter}
droPer1.genbank.est.xeno.pslCDnaFilter    = ${lowCover.genbank.est.xeno.pslCDnaFilter}
droPer1.refseq.mrna.native.load = no
droPer1.refseq.mrna.xeno.load = yes
droPer1.genbank.mrna.native.load = no
droPer1.genbank.mrna.xeno.load = yes
droPer1.genbank.est.native.load = no
droPer1.genbank.est.xeno.load = no
droPer1.downloadDir = droPer1
droPer1.perChromTables = no

    # update /cluster/data/genbank/
    cvs ci etc/genbank.conf
    make etc-update

    # droPer1 is a new species, so add it to src/lib/gbGenome.c
    make
    cvs ci src/lib/gbGenome.c
    make install-server

    ssh kkstore02
    cd /cluster/data/genbank
    nice bin/gbAlignStep -initial droPer1 &

    # when finished
    ssh hgwdev
    cd /cluster/data/genbank
    nice ./bin/gbDbLoadStep -drop -initialLoad droPer1&
    featureBits droPer1 xenoRefGene
#18268342 bases of 175583556 (10.404%) in intersection
    featureBits droPer1 xenoMrna
#16624016 bases of 175583556 (9.468%) in intersection

# MAKE Drosophila Proteins track (DONE braney 2005-12-07)
    ssh kkstore03
    mkdir -p /cluster/data/droPer1/blastDb
    cd /cluster/data/droPer1/blastDb
    faSplit sequence ../scaffolds.fa 400 x
    for i in *.fa; do /cluster/bluearc/blast229/formatdb -i $i -p F 2> /dev/null; done
    rm *.fa *.log
    cd ..

    ssh kk
    destDir=/cluster/panasas/home/store/droPer1/blastDb
    mkdir -p $destDir
    cp /cluster/data/droPer1/blastDb/* $destDir
    
    mkdir -p /cluster/data/droPer1/bed/tblastn.dm2FB
    cd /cluster/data/droPer1/bed/tblastn.dm2FB
    ls -1S $destDir/*.nsq | sed "s/\.nsq//" > target.lst
    mkdir fbfa
    # calculate a reasonable number of jobs 
    calc `wc /cluster/data/dm2/bed/blat.dm2FB/dm2FB.psl|awk "{print \\\$1}"`/\(80000/`wc target.lst | awk "{print \\\$1}"`\)
# 18929/(80000/396) = 93.698550

    split -l 94 /cluster/data/dm2/bed/blat.dm2FB/dm2FB.psl fbfa/fb
    cd fbfa
    for i in *; do pslxToFa $i $i.fa; rm $i; done
    cd ..
    ls -1S fbfa/*.fa > fb.lst
    mkdir -p /cluster/bluearc/droPer1/bed/tblastn.dm2FB/blastOut  
    ln -s /cluster/bluearc/droPer1/bed/tblastn.dm2FB/blastOut  
    for i in `cat fb.lst`; do  mkdir blastOut/`basename $i .fa`; done
    tcsh
    cat << '_EOF_' > blastGsub
#LOOP
blastSome $(path1) {check in line $(path2)} {check out exists blastOut/$(root2)/q.$(root1).psl } 
#ENDLOOP
'_EOF_'
cat << '_EOF_' > blastSome
#!/bin/sh
BLASTMAT=/iscratch/i/blast/data
export BLASTMAT
g=`basename $2`
f=/tmp/`basename $3`.$g
for eVal in 0.01 0.001 0.0001 0.00001 0.000001 1E-09 1E-11
do
if /scratch/blast/blastall -M BLOSUM80 -m 0 -F no -e $eVal -p tblastn -d $1 -i $2 -o $f.8
then
        mv $f.8 $f.1
        break;
fi
done
if test -f  $f.1
then
if /cluster/bin/i386/blastToPsl $f.1 $f.2
then
        liftUp -nosort -type=".psl" -pslQ -nohead $3.tmp /cluster/data/dm2/bed/blat.dm2FB/protein.lft warn $f.2
        mv $3.tmp $3
        rm -f $f.1 $f.2 $f.3 $f.4
        exit 0
    fi
fi
rm -f $f.1 $f.2 $3.tmp $f.3 $f.8 $f.4
exit 1
'_EOF_'

    chmod +x blastSome
    gensub2 target.lst fb.lst blastGsub blastSpec

    para create blastSpec
    para push

# Completed: 79992 of 79992 jobs
# CPU time in finished jobs:    3544407s   59073.45m   984.56h   41.02d  0.112 y
# IO & Wait Time:                659244s   10987.40m   183.12h    7.63d  0.021 y
# Average job time:                  53s       0.88m     0.01h    0.00d
# Longest finished job:           20184s     336.40m     5.61h    0.23d
# Submission to last job:         20184s     336.40m     5.61h    0.23d

    ssh kkstore02
    cd /cluster/data/droPer1/bed/tblastn.dm2FB
    tcsh
    cat << '_EOF_' > chainGsub
#LOOP
chainSome $(path1)
#ENDLOOP
'_EOF_'

    cat << '_EOF_' > chainSome
(cd $1; cat q.*.psl | simpleChain -prot -outPsl -maxGap=25000 stdin ../c.`basename $1`.psl)
'_EOF_'
    chmod +x chainSome

    ls -1dS `pwd`/blastOut/fb?? > chain.lst
    gensub2 chain.lst single chainGsub chainSpec

    exit # out of cshell
    ssh kki

    cd /cluster/data/droPer1/bed/tblastn.dm2FB
    para create chainSpec

# Completed: 202 of 202 jobs
# CPU time in finished jobs:        550s       9.17m     0.15h    0.01d  0.000 y
# IO & Wait Time:                  5783s      96.38m     1.61h    0.07d  0.000 y
# Average job time:                  31s       0.52m     0.01h    0.00d
# Longest finished job:              95s       1.58m     0.03h    0.00d
# Submission to last job:           582s       9.70m     0.16h    0.01d

    cd /cluster/data/droPer1/bed/tblastn.dm2FB/blastOut
    for i in fb??
    do 
	awk "(\$13 - \$12)/\$11 > 0.6 {print}" c.$i.psl > c60.$i.psl
	sort -rn c60.$i.psl | pslUniq stdin u.$i.psl
	awk "((\$1 / \$11) ) > 0.60 { print   }" c60.$i.psl > m60.$i.psl
	echo $i
    done

    sort -T /tmp -k 14,14 -k 16,16n -k 17,17n u.*.psl m60* | uniq > /cluster/data/droPer1/bed/tblastn.dm2FB/blastDm2FB.psl
    cd ..
    wc blastDm2FB.psl
# 19710  413910 4663053 /cluster/data/droPer1/bed/tblastn.dm2FB/blastDm2FB.psl
    pslUniq blastDm2FB.psl stdout | wc                                                                                    
# 18207  382347 4457325
    cat fbfa/*fa | grep ">" | wc
# 82338   82338 1300520

    ssh hgwdev
    cd /cluster/data/droPer1/bed/tblastn.dm2FB
    hgLoadPsl droPer1 blastDm2FB.psl
    featureBits droPer1 blastDm2FB
# 18389603 bases of 175583556 (10.473%) in intersection

    exit

    # back to kkstore03
    rm -rf blastOut

# End tblastn


###########################################################################
# SWAP/CHAIN/NET DM3 (DONE 6/7/07 angie)
    ssh kkstore02
    mkdir /cluster/data/droPer1/bed/blastz.dm3.swap
    cd /cluster/data/droPer1/bed/blastz.dm3.swap
    doBlastzChainNet.pl -swap /cluster/data/dm3/bed/blastz.droPer1/DEF >& do.log &
    tail -f do.log
    ln -s blastz.dm3.swap /cluster/data/droPer1/bed/blastz.dm3

#############################################################################
# self lastz run (DONE - 2014-07-07 - Hiram)
    screen -S droPer1      # use a screen to manage this longish running job
    mkdir /hive/data/genomes/droPer1/bed/lastzSelf.2014-07-07
    cd /hive/data/genomes/droPer1/bed/lastzSelf.2014-07-07

    # always set the BLASTZ program so we know what version was used
    cat << '_EOF_' > DEF
# D. persimilis vs D. persimilis
BLASTZ=/cluster/bin/penn/lastz-distrib-1.03.52/bin/lastz
BLASTZ_M=50

BLASTZ_H=2000
BLASTZ_Y=3400
BLASTZ_L=4000
BLASTZ_K=2200
BLASTZ_Q=/cluster/data/blastz/HoxD55.q
#     A    C    G    T
#    91  -90  -25 -100
#   -90  100 -100  -25
#   -25 -100  100  -90
#  -100  -25  -90  91

# TARGET: D. persimilis Dp4
SEQ1_DIR=/hive/data/genomes/droPer1/droPer1.2bit
SEQ1_LEN=/hive/data/genomes/droPer1/chrom.sizes
SEQ1_CHUNK=10000000
SEQ1_LAP=10000
SEQ1_LIMIT=50

# QUERY: D. persimilis Dp4
SEQ2_DIR=/hive/data/genomes/droPer1/droPer1.2bit
SEQ2_LEN=/hive/data/genomes/droPer1/chrom.sizes
SEQ2_CHUNK=10000000
SEQ2_LAP=10000
SEQ2_LIMIT=200

BASE=/hive/data/genomes/droPer1/bed/lastzSelf.2014-07-07
TMPDIR=/dev/shm
'_EOF_'
    # << emacs

    time (doBlastzChainNet.pl `pwd`/DEF -verbose=2 \
        -workhorse=hgwdev -smallClusterHub=ku -bigClusterHub=ku) > do.log 2>&1
    #  real    417m57.427s

    featureBits droPer1 chainSelfLink > fb.droPer1.chainSelfLink.txt 2>&1
    cat fb.droPer1.chainSelfLink.txt

    #   171616442 bases of 175583556 (97.741%) in intersection

#############################################################################
# swap chain/net from dm6 (DONE 2014-08-29 - Hiram)
    # original alignment
    cd /hive/data/genomes/dm6/bed/lastzDroPer1.2014-08-29
    cat fb.dm6.chainDroPer1Link.txt
    # 84187839 bases of 142573024 (59.049%) in intersection

    #   running the swap
    mkdir /hive/data/genomes/droPer1/bed/blastz.dm6.swap
    cd /hive/data/genomes/droPer1/bed/blastz.dm6.swap
    time nice -n +19 doBlastzChainNet.pl -verbose=2 \
        /hive/data/genomes/dm6/bed/lastzDroPer1.2014-08-29/DEF \
        -swap -syntenicNet -chainMinScore=3000 -chainLinearGap=loose \
        -workhorse=hgwdev -smallClusterHub=ku -bigClusterHub=ku > swap.log 2>&1
    # real    13m28.190s
    cat fb.droPer1.chainDm6Link.txt
    # 92967575 bases of 175583556 (52.948%) in intersection

###########################################################################

# for emacs: -*- mode: sh; -*-


# Drosophila ananassae -- 
# 
# TIGR's 15 July 2004 assembly
# 
#


# DOWNLOAD SEQUENCE (DONE 11/3/04 angie)
    ssh kksilo
    mkdir /cluster/store8/droAna1
    cd /cluster/data
    ln -s /cluster/store8/droAna1 droAna1
    cd /cluster/data/droAna1
    mkdir jkStuff bed
    mkdir downloads
    cd downloads
    wget http://rana.lbl.gov/drosophila/assemblies/dann_tigr_celeraassembler_15july04.tar.gz
    tar xvzf dann_tigr_celeraassembler_15july04.tar.gz 
    faSize scaffolds.fasta
#167097297 bases (1330500 N's 165766797 real) in 11672 sequences in 1 files
#Total size: mean 14316.1 sd 209959.5 min 122 (2448480) max 9804644 (2448886) median 1253
#N count: mean 114.0 sd 1204.3
    faSize contigs.fasta
#165766797 bases (0 N's 165766797 real) in 24977 sequences in 1 files
#Total size: mean 6636.8 sd 14377.4 min 122 (2331949) max 247893 (2439353) median 1728
#N count: mean 0.0 sd 0.0
    rm contigs.fasta


# PARTITION SCAFFOLDS FOR REPEATMASKER RUN (DONE 11/3/04 angie)
    # Chop up large scaffolds into ~500kb chunks for RepeatMasker, 
    # then glom the tiny scaffolds up into ~500k collections (looks like 
    # some almost-500k pieces are glommed together --> a few almost-1M chunks,
    # but that's OK).
    ssh kksilo
    cd /cluster/data/droAna1
    mkdir scaffoldsSplit
    faSplit size downloads/scaffolds.fasta 500000 -oneFile \
      scaffoldsSplit -lift=jkStuff/scaffoldsSplit.lft
    mkdir chunks500k
    faSplit about scaffoldsSplit.fa 500000 chunks500k/chunk_


# CREATING DATABASE (DONE 11/3/04 angie)
    # Create the database.
    ssh hgwdev
    # Make sure there is at least 5 gig free for the database
    df -h /var/lib/mysql
#/dev/sdc1             1.8T  638G 1022G  39% /var/lib/mysql
    hgsql '' -e 'create database droAna1'


# RUN REPEAT MASKER (DONE 11/3/04 angie)
    # January ("March") '04 version of RepeatMasker and libs.
    # make the run directory, output directory, and job list
    ssh kksilo
    cd /cluster/data/droAna1
    cat << '_EOF_' > jkStuff/RMDrosophila
#!/bin/csh -fe

cd $1
/bin/mkdir -p /tmp/droAna1/$2
/bin/cp ../chunks500k/$2 /tmp/droAna1/$2/
pushd /tmp/droAna1/$2
/cluster/bluearc/RepeatMasker/RepeatMasker -s -spec drosophila $2
popd
/bin/cp /tmp/droAna1/$2/$2.out ./
/bin/rm -fr /tmp/droAna1/$2/*
/bin/rmdir --ignore-fail-on-non-empty /tmp/droAna1/$2
/bin/rmdir --ignore-fail-on-non-empty /tmp/droAna1
'_EOF_'
    # << this line makes emacs coloring happy
    chmod +x jkStuff/RMDrosophila
    mkdir RMRun RMOut
    cp /dev/null RMRun/RMJobs
    foreach f ( chunks500k/*.fa )
      set chunk = $f:t
      echo ../jkStuff/RMDrosophila \
           /cluster/data/droAna1/RMOut $chunk \
           '{'check in line+ /cluster/data/droAna1/$f'}' \
         '{'check out line+ /cluster/data/droAna1/RMOut/$chunk.out'}' \
      >> RMRun/RMJobs
    end

    # do the run
    ssh kk9
    cd /cluster/data/droAna1/RMRun
    para create RMJobs
    para try, check, push, check,...
#Completed: 305 of 305 jobs
#Average job time:                3482s      58.04m     0.97h    0.04d
#Longest job:                     6561s     109.35m     1.82h    0.08d
#Submission to last job:         17416s     290.27m     4.84h    0.20d

    # Lift up the split-scaffold .out's to scaffold .out's
    ssh kksilo
    cd /cluster/data/droAna1
    foreach f (RMOut/*.fa.out)
      liftUp $f:r:r.scaf.out jkStuff/scaffoldsSplit.lft warn $f > /dev/null
    end
    # Make a consolidated scaffold .out file too:
    head -3 RMOut/chunk_00.fa.out > RMOut/scaffolds.fa.out
    foreach f (RMOut/*.scaf.out)
      tail +4 $f >> RMOut/scaffolds.fa.out 
    end
    # Load the .out files into the database with:
    ssh hgwdev
    hgLoadOut droAna1 /cluster/data/droAna1/RMOut/scaffolds.fa.out
    # hgLoadOut made a "scaffolds_rmsk" table even with -table=rmsk, 
    # but we want a non-split with no prefix table:
    hgsql droAna1 -e 'rename table scaffolds_rmsk to rmsk'
    # Fix up the indices too:
    hgsql droAna1 -e 'drop index bin       on rmsk; \
                  drop index genoStart on rmsk; \
                  drop index genoEnd   on rmsk; \
                  create index bin       on rmsk (genoName(7), bin); \
                  create index genoStart on rmsk (genoName(7), genoStart); \
                  create index genoEnd   on rmsk (genoName(7), genoEnd);'


# EXTRACTING GAP INFO FROM BLOCKS OF NS (DONE 11/5/04 angie)
    ssh kksilo
    mkdir /cluster/data/droAna1/bed/fakeAgp
    cd /cluster/data/droAna1/bed/fakeAgp
    faGapSizes ../../downloads/scaffolds.fasta \
        -niceSizes=5,10,20,25,30,40,50,100,250,500,1000,10000,100000
    # Wow, all block of N's seem to be exactly 100bp long.  
    # hgFakeAgp's default -minContigGap of 25 will be fine.  
    hgFakeAgp ../../downloads/scaffolds.fasta fake.agp
    ssh hgwdev
    hgLoadGap -unsplit droAna1 /cluster/data/droAna1/bed/fakeAgp/fake.agp


# SIMPLE REPEATS (TRF) (DONE 11/3/04 angie)
    ssh kksilo
    mkdir /cluster/data/droAna1/bed/simpleRepeat
    cd /cluster/data/droAna1/bed/simpleRepeat
    nice trfBig -trf=/cluster/bin/i386/trf ../../downloads/scaffolds.fasta \
      /dev/null -bedAt=simpleRepeat.bed -tempDir=/tmp \
    |& egrep -v '^(Removed|Tandem|Copyright|Loading|Allocating|Initializing|Computing|Scanning|Freeing)' \
    > trf.log &
    # check on this with
    tail -f trf.log

    # Load this into the database as so
    ssh hgwdev
    hgLoadBed droAna1 simpleRepeat \
      /cluster/data/droAna1/bed/simpleRepeat/simpleRepeat.bed \
      -sqlTable=$HOME/kent/src/hg/lib/simpleRepeat.sql


# FILTER SIMPLE REPEATS (TRF) INTO MASK (DONE 11/3/04 angie)
    # make a filtered version of the trf output: 
    # keep trf's with period <= 12:
    ssh kksilo
    cd /cluster/data/droAna1/bed/simpleRepeat
    awk '{if ($5 <= 12) print;}' simpleRepeat.bed > trfMask.bed


# MASK FA USING REPEATMASKER AND FILTERED TRF FILES (DONE 11/3/04 angie)
    ssh kksilo
    cd /cluster/data/droAna1
    maskOutFa -soft downloads/scaffolds.fasta bed/simpleRepeat/trfMask.bed \
      scaffolds.fa
    maskOutFa -softAdd scaffolds.fa RMOut/scaffolds.fa.out scaffolds.fa
    # Now clean up the unmasked split scaffolds to avoid confusion later.
    rm -r chunks500k scaffoldsSplit.fa jkStuff/scaffoldsSplit.lft


# STORE SEQUENCE AND ASSEMBLY INFORMATION (DONE 11/3/04 angie)
    # Translate to 2bit
    ssh kksilo
    cd /cluster/data/droAna1
    faToTwoBit scaffolds.fa droAna1.2bit
    # Make chromInfo.tab.
    mkdir bed/chromInfo
    twoBitInfo droAna1.2bit stdout \
    | awk '{printf "%s\t%s\t/gbdb/droAna1/droAna1.2bit\n", $1, $2;}' \
    > bed/chromInfo/chromInfo.tab

    # Make symbolic a link from /gbdb/droAna1 to the 2bit.
    ssh hgwdev
    mkdir -p /gbdb/droAna1
    ln -s /cluster/data/droAna1/droAna1.2bit /gbdb/droAna1/
    # Load chromInfo table.
    hgsql droAna1 < $HOME/kent/src/hg/lib/chromInfo.sql
    hgsql droAna1 -e 'load data local infile \
      "/cluster/data/droAna1/bed/chromInfo/chromInfo.tab" into table chromInfo'
    # Make chrom.sizes from chromInfo contents and check scaffold count.
    hgsql droAna1 -N -e 'select chrom,size from chromInfo' \
    > /cluster/data/droAna1/chrom.sizes
    wc -l /cluster/data/droAna1/chrom.sizes
#  11672 /cluster/data/droAna1/chrom.sizes


# CREATING GRP TABLE FOR TRACK GROUPING (DONE 11/3/04 angie)
    # Copy all the data from the table "grp" 
    # in an existing database to the new database
    ssh hgwdev
    hgsql droAna1 -e 'create table grp (PRIMARY KEY(NAME)) select * from hg17.grp'


# MAKE HGCENTRALTEST ENTRY AND TRACKDB TABLE (DONE 11/4/04 angie)
    # Warning: genome and organism fields must correspond
    # with defaultDb values
    echo 'INSERT INTO dbDb \
        (name, description, nibPath, organism, \
             defaultPos, active, orderKey, genome, scientificName, \
             htmlPath, hgNearOk, hgPbOk, sourceName) values \
        ("droAna1", "Jul. 2004", "/gbdb/droAna1", "D. ananassae", \
             "2448876:2700001-2725000", 1, 57, \
             "D. ananassae", \
             "Drosophila ananassae", "/gbdb/droAna1/html/description.html", \
             0, 0, "TIGR 15 July 2004");' \
      | hgsql -h genome-testdb hgcentraltest
    echo 'INSERT INTO defaultDb (genome, name) values ("D. ananassae", "droAna1");' \
      | hgsql -h genome-testdb hgcentraltest

    # Make trackDb table so browser knows what tracks to expect:
    ssh hgwdev
    cd ~/kent/src/hg/makeDb/trackDb
    cvs up -d -P

    # Edit trackDb/makefile to add droAna1 to the DBS variable.
    mkdir drosophila/droAna1
    # Create a simple drosophila/droAna1/description.html file.
    cvs add drosophila/droAna1
    cvs add drosophila/droAna1/description.html
    make update DBS=droAna1 ZOO_DBS=

    # go public on genome-test
    cvs ci makefile
    cvs ci drosophila/droAna1
    mkdir /gbdb/droAna1/html
    # in a clean, updated tree's kent/src/hg/makeDb/trackDb:
    make alpha


# PUT SEQUENCE ON /ISCRATCH FOR BLASTZ (DONE 11/3/04 angie)
    # First, agglomerate small scaffolds into chunks of ~100k median 
    # (many scaffolds are larger than that) so we don't have too many 
    # files for one dir, but keep a reasonably low job run time:
    ssh kksilo
    cd /cluster/data/droAna1
    mkdir chunksUnsplit
    faSplit about scaffolds.fa 100000 chunksUnsplit/chunk_
    ssh kkr1u00
    mkdir /iscratch/i/droAna1
    cp -pR /cluster/data/droAna1/chunksUnsplit /iscratch/i/droAna1/
    cp -p /cluster/data/droAna1/droAna1.2bit /iscratch/i/droAna1/
    iSync


# PRODUCING GENSCAN PREDICTIONS (DONE 11/4/04 angie)
    ssh kksilo
    # Make hard-masked scaffolds and split up for processing:
    cd /cluster/data/droAna1
    maskOutFa scaffolds.fa hard scaffolds.fa.masked
    mkdir chunksUnsplitMasked
    faSplit about scaffolds.fa.masked 100000 chunksUnsplitMasked/chunk_
    mkdir /cluster/data/droAna1/bed/genscan
    cd /cluster/data/droAna1/bed/genscan
    # Check out hg3rdParty/genscanlinux to get latest genscan:
    cvs co hg3rdParty/genscanlinux
    # Make 3 subdirectories for genscan to put their output files in
    mkdir gtf pep subopt
    ls -1S ../../chunksUnsplitMasked/chunk*.fa > chunks.list
    cat << '_EOF_' > gsub
#LOOP
gsBig {check in line+ $(path1)} {check out line gtf/$(root1).gtf} -trans={check out line pep/$(root1).pep} -subopt={check out line subopt/$(root1).bed} -exe=hg3rdParty/genscanlinux/genscan -par=hg3rdParty/genscanlinux/HumanIso.smat -tmp=/tmp -window=2400000
#ENDLOOP
'_EOF_'
    # << this line keeps emacs coloring happy
    gensub2 chunks.list single gsub jobList
    ssh kki
    cd /cluster/data/droAna1/bed/genscan
    para create jobList
    para try, check, push, check, ...
#Completed: 463 of 463 jobs
#Average job time:                  12s       0.21m     0.00h    0.00d
#Longest job:                      317s       5.28m     0.09h    0.00d
#Submission to last job:           445s       7.42m     0.12h    0.01d

    # If there are crashes, diagnose with "para problems".  
    # If a job crashes due to genscan running out of memory, re-run it 
    # manually with "-window=1200000" instead of "-window=2400000".
    
    # Concatenate scaffold-level results:
    ssh kksilo
    cd /cluster/data/droAna1/bed/genscan
    cat gtf/*.gtf > genscan.gtf
    cat subopt/*.bed > genscanSubopt.bed
    cat pep/*.pep > genscan.pep
    # Clean up
    rm -r /cluster/data/droAna1/chunksUnsplitMasked

    # Load into the database as so:
    ssh hgwdev
    cd /cluster/data/droAna1/bed/genscan
    # Reloaded without -genePredExt 1/6/05:
    ldHgGene -gtf droAna1 genscan genscan.gtf
    hgPepPred droAna1 generic genscanPep genscan.pep
    hgLoadBed droAna1 genscanSubopt genscanSubopt.bed

# MYTOUCH FIX - jen - 2006-01-24
  sudo mytouch droAna1 genscanPep 0501071300.00

# MAKE DOWNLOADABLE FILES (DONE 11/4/04 angie)
    ssh kksilo
    mkdir /cluster/data/droAna1/zips
    cd /cluster/data/droAna1
    zip -j zips/scaffoldOut.zip RMOut/scaffolds.fa.out
    zip -j zips/scaffoldFa.zip scaffolds.fa
    zip -j zips/scaffoldFaMasked.zip scaffolds.fa.masked
    zip -j zips/scaffoldTrf.zip bed/simpleRepeat/trfMask.bed
    foreach f (zips/*.zip)
      echo $f
      unzip -t $f | tail -1
    end
    ssh hgwdev
    mkdir /usr/local/apache/htdocs/goldenPath/droAna1
    cd /usr/local/apache/htdocs/goldenPath/droAna1
    mkdir bigZips database
    # Create README.txt files in bigZips/ and database/ to explain the files.
    cd bigZips
    cp -p /cluster/data/droAna1/zips/*.zip .
    md5sum *.zip > md5sum.txt


# SWAP DM1-DROANA1 BLASTZ (DONE 11/4/04 angie)
    ssh kksilo
    mkdir /cluster/data/droAna1/bed/blastz.dm1.swap.2004-11-03
    ln -s blastz.dm1.swap.2004-11-03 /cluster/data/droAna1/bed/blastz.dm1
    cd /cluster/data/droAna1/bed/blastz.dm1
    set aliDir = /cluster/data/dm1/bed/blastz.droAna1
    cp $aliDir/S1.len S2.len
    cp $aliDir/S2.len S1.len
    # With 11k scaffolds, we don't want a directory with one file per 
    # scaffold.  So just make one .axt with everything -- not too huge 
    # anyway, given these little insect genomes.
    cat $aliDir/axtChrom/chr*.axt \
    | axtSwap stdin $aliDir/S1.len $aliDir/S2.len stdout \
    | axtSort stdin dm1.axt
    du -sh $aliDir/axtChrom dm1.axt
#389M    /cluster/data/dm1/bed/blastz.droAna1/axtChrom
#389M    dm1.axt


# CHAIN MELANOGASTER BLASTZ (DONE 11/4/04 angie)
    # Run axtChain on kolossus (one big dm1.axt input)
    ssh kolossus
    mkdir /cluster/data/droAna1/bed/blastz.dm1/axtChain
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    axtChain -verbose=0 ../dm1.axt /cluster/data/droAna1/droAna1.2bit \
      /cluster/data/dm1/nib stdout \
    | chainAntiRepeat /cluster/data/droAna1/droAna1.2bit \
      /cluster/data/dm1/nib stdin stdout \
    | chainMergeSort stdin > all.chain
    # Load chains into database
    ssh hgwdev
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    hgLoadChain -tIndex droAna1 chainDm1 all.chain


# NET MELANOGASTER BLASTZ (DONE 11/4/04 angie)
    ssh kksilo
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    chainPreNet all.chain ../S1.len ../S2.len stdout \
    | chainNet stdin -minSpace=1 ../S1.len ../S2.len stdout /dev/null \
    | netSyntenic stdin noClass.net

    # Add classification info using db tables:
    ssh hgwdev
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    netClass -noAr noClass.net droAna1 dm1 melanogaster.net \
    |& g -v "table gap doesn't exist"

    # Make a 'syntenic' subset:
    ssh kksilo
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    rm noClass.net
    netFilter -syn melanogaster.net > melanogasterSyn.net

    # Load the nets into database 
    ssh hgwdev
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    netFilter -minGap=10 melanogaster.net |  hgLoadNet droAna1 netDm1 stdin
    netFilter -minGap=10 melanogasterSyn.net \
    | hgLoadNet droAna1 netSyntenyDm1 stdin


# MAKE AXTNET (DONE 11/4/04 angie)
    ssh kksilo
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    netToAxt melanogaster.net all.chain /cluster/data/droAna1/droAna1.2bit \
        /cluster/data/dm1/nib stdout \
      | axtSort stdin melanogasterNet.axt


# MAKE VSDM1 DOWNLOADABLES (DONE 11/4/04 angie)
    ssh kksilo
    cd /cluster/data/droAna1/bed/blastz.dm1/axtChain
    nice gzip *.{chain,net,axt}
    ssh hgwdev
    mkdir /usr/local/apache/htdocs/goldenPath/droAna1/vsDm1
    cd /usr/local/apache/htdocs/goldenPath/droAna1/vsDm1
    cp -p /cluster/data/droAna1/bed/blastz.dm1/axtChain/all.chain.gz \
      melanogaster.chain.gz
    cp -p /cluster/data/droAna1/bed/blastz.dm1/axtChain/melanogaster.net.gz .
    cp -p /cluster/data/droAna1/bed/blastz.dm1/axtChain/melanogasterNet.axt.gz .
    # Make a README.txt which explains the files & formats.
    md5sum *.gz */*.gz > md5sum.txt


# MAKE 11.OOC FILE FOR BLAT (DONE 11/4/04 angie)
    # Use -repMatch=100 (based on size -- for human we use 1024, and 
    # fly size is ~4.4% of human judging by gapless dm1 genome size from 
    # featureBits -- we would use 45, but bump that up a bit to be more 
    # conservative).
    ssh kkr1u00
    mkdir /cluster/bluearc/droAna1
    blat /cluster/data/droAna1/droAna1.2bit /dev/null /dev/null -tileSize=11 \
      -makeOoc=/cluster/bluearc/droAna1/11.ooc -repMatch=100
#Wrote 9721 overused 11-mers to /cluster/bluearc/droAna1/11.ooc
    cp -p /cluster/bluearc/droAna1/*.ooc /iscratch/i/droAna1/
    iSync


# GET GENBANK mRNA AND EST COUNTS (DONE 11/8/04 angie)
    # Go to the latest GenBank full release dir and get an idea of how
    # many mRNAs and ESTs there are to align.
    ssh eieio
    cd /cluster/data/genbank/data/processed/genbank.144.0/full
    awk '$4 == "Drosophila" {print $4 " " $5;}' mrna.gbidx | sort | uniq -c
#      9 Drosophila ananassae
#      1 Drosophila mojavensis
#     33 Drosophila virilis
    # Wow, questionable whether we should have a native mRNA track here.
    awk '$4 == "Drosophila" {print $4 " " $5;}' est*.gbidx | sort | uniq -c
# 382439 Drosophila melanogaster
#   4105 Drosophila simulans
#    779 Drosophila yakuba
    # And a native EST track isn't even a possibility for the new flies 
    # at this point!  


# AUTO UPDATE GENBANK MRNA RUN (DONE 11/16/04 angie)
    ssh hgwdev

    # Update genbank config and source in CVS:
    cd ~/kent/src/hg/makeDb/genbank
    cvsup .

    # Edit etc/genbank.conf and add these lines (note scaffold-browser settings):
# droAna1 (D. ananassae)
droAna1.genome = /iscratch/i/droAna1/droAna1.2bit
droAna1.mondoTwoBitParts = 1000
droAna1.lift = no
droAna1.refseq.mrna.native.load = no
droAna1.refseq.mrna.xeno.load = yes
droAna1.refseq.mrna.xeno.pslReps = -minCover=0.15 -minAli=0.75 -nearTop=0.005
droAna1.genbank.mrna.xeno.load = yes
# GenBank has no D. ananassae ESTs at this point... that may change.
droAna1.genbank.est.native.load = no
droAna1.genbank.est.xeno.load = no
droAna1.downloadDir = droAna1
droAna1.perChromTables = no

    cvs ci etc/genbank.conf
    # Since D. ananassae is a new species for us, edit src/lib/gbGenome.c.  
    # Pick some other browser species, & monkey-see monkey-do.  
    cvs diff src/lib/gbGenome.c
    make
    cvs ci src/lib/gbGenome.c
    # Edit src/align/gbBlat to add /iscratch/i/droAna1/11.ooc
    cvs diff src/align/gbBlat
    make
    cvs ci src/align/gbBlat

    # Install to /cluster/data/genbank:
    make install-server

    ssh `fileServer /cluster/data/genbank/`
    cd /cluster/data/genbank
    # This is an -initial run, (xeno) RefSeq only:
    nice bin/gbAlignStep -srcDb=refseq -type=mrna -initial droAna1 &
    tail -f [its logfile]
    # Load results:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad droAna1
    featureBits droAna1 xenoRefGene
#16520385 bases of 165766797 (9.966%) in intersection
    # Clean up:
    rm -rf work/initial.droAna1

    # This is an -initial run, mRNA only:
    nice bin/gbAlignStep -srcDb=genbank -type=mrna -initial droAna1 &
    tail -f [its logfile]
    # Load results:
    ssh hgwdev
    cd /cluster/data/genbank
    nice bin/gbDbLoadStep -verbose=1 -drop -initialLoad droAna1
    featureBits droAna1 all_mrna
#19602 bases of 165766797 (0.012%) in intersection
    featureBits droAna1 xenoMrna
#17295487 bases of 165766797 (10.434%) in intersection
    # Clean up:
    rm -rf work/initial.droAna1


# MAKE GCPERCENT (DONE 11/4/04 angie)
    ssh hgwdev
    mkdir /cluster/data/droAna1/bed/gcPercent
    cd /cluster/data/droAna1/bed/gcPercent
    # create and load gcPercent table
    hgGcPercent droAna1 /cluster/data/droAna1


# MAKE HGCENTRALTEST BLATSERVERS ENTRY (DONE 12/?/04 heather)
    ssh hgwdev
    echo 'insert into blatServers values("droAna1", "blat14", "17780", 1, 0); \
          insert into blatServers values("droAna1", "blat14", "17781", 0, 1);' \
      | hgsql -h genome-testdb hgcentraltest


# MAKE Drosophila Proteins track  (DONE braney 11/17/04)
    ssh kksilo
    mkdir -p /cluster/data/droAna1/blastDb
    cd /cluster/data/droAna1/blastDb
    faSplit sequence ../scaffolds.fa 400 x
    for i in *.fa; do formatdb -i $i -p F 2> /dev/null; done
    rm *.fa *.log

    ssh kkr1u00
    mkdir -p /iscratch/i/droAna1/blastDb
    cp /cluster/data/droAna1/blastDb/* /iscratch/i/droAna1/blastDb
    (iSync) 2>&1 > sync.out
    
    mkdir -p /cluster/data/droAna1/bed/tblastn.dm1FB
    cd /cluster/data/droAna1/bed/tblastn.dm1FB
    ls -1S /iscratch/i/droAna1/blastDb/*.nsq | sed "s/\.nsq//" > bug.lst
    exit

    # back to kksilo
    cd /cluster/data/droAna1/bed/tblastn.dm1FB
    mkdir fbfa
    # calculate a reasonable number of jobs
    calc `wc /cluster/data/dm1/bed/blat.dm1FB/dm1FB.psl | awk "{print \\\$1}"`/\(150000/`wc bug.lst | awk "{print \\\$1}"`\)
    # 18735/(150000/396) = 49.460400
    split -l 49 /cluster/data/dm1/bed/blat.dm1FB/dm1FB.psl fbfa/fb
    cd fbfa
    for i in *; do pslxToFa $i $i.fa; rm $i; done
    cd ..
    ls -1S fbfa/*.fa > fb.lst
    mkdir blastOut
    for i in `cat fb.lst`; do  mkdir blastOut/`basename $i .fa`; done
    cat << '_EOF_' > blastGsub
#LOOP
blastSome $(path1) {check in line $(path2)} {check out exists blastOut/$(root2)/q.$(root1).psl } 
#ENDLOOP
'_EOF_'
    cat << '_EOF_' > blastSome
#!/bin/sh
BLASTMAT=/iscratch/i/blast/data
export BLASTMAT
g=`basename $2`
f=/tmp/`basename $3`.$g
for eVal in 0.01 0.001 0.0001 0.00001 0.000001 1E-09 1E-11
do
if /scratch/blast/blastall -M BLOSUM80 -m 0 -F no -e $eVal -p tblastn -d $1 -i $2 -o $f.8
then
        mv $f.8 $f.1
        break;
fi
done
if test -f  $f.1
then
if /cluster/bin/i386/blastToPsl $f.1 $f.2
then
	liftUp -nosort -type=".psl" -pslQ -nohead $3.tmp /iscratch/i/dm1/protein.lft warn $f.2

        mv $3.tmp $3
        rm -f $f.1 $f.2 
        exit 0
    fi
fi
rm -f $f.1 $f.2 $3.tmp 
exit 1
'_EOF_'

    chmod +x blastSome
    gensub2 bug.lst fb.lst blastGsub blastSpec

    ssh kk
    cd /cluster/data/droAna1/bed/tblastn.dm1FB
    para create blastSpec
    para try, push

# Completed: 151668 of 151668 jobs
# CPU time in finished jobs:    2932565s   48876.08m   814.60h   33.94d  0.093 y
# IO & Wait Time:                694006s   11566.77m   192.78h    8.03d  0.022 y
# Average job time:                  24s       0.40m     0.01h    0.00d
# Longest job:                     2721s      45.35m     0.76h    0.03d
# Submission to last job:         73860s    1231.00m    20.52h    0.85d

    cat << '_EOF_' > chainGsub
#LOOP
chainSome $(path1)
#ENDLOOP
'_EOF_'

    cat << '_EOF_' > chainSome
(cd $1; cat q.*.psl | simpleChain -prot -outPsl -maxGap=25000 stdin ../c.`basename $1`.psl)
'_EOF_'
    chmod +x chainSome

    ls -1dS `pwd`/blastOut/fb?? > chain.lst
    gensub2 chain.lst single chainGsub chainSpec
    para create chainSpec

    # should run this on the mini-cluster or with my shove script
    # so you can limit the number of jobs starting to 3 or 4
    para try, push...

# Completed: 383 of 383 jobs
# CPU time in finished jobs:        327s       5.44m     0.09h    0.00d  0.000 y
# IO & Wait Time:                  8218s     136.97m     2.28h    0.10d  0.000 y
# Average job time:                  22s       0.37m     0.01h    0.00d
# Longest job:                       54s       0.90m     0.01h    0.00d
# Submission to last job:           674s      11.23m     0.19h    0.01d

    exit
    # back to kksilo
    cd /cluster/data/droAna1/bed/tblastn.dm1FB/blastOut
    for i in fb??
    do 
	awk "(\$13 - \$12)/\$11 > 0.6 {print}" c.$i.psl > c60.$i.psl
	sort -rn c60.$i.psl | pslUniq stdin u.$i.psl
	awk "((\$1 / \$11) ) > 0.60 { print   }" c60.$i.psl > m60.$i.psl
	echo $i
    done
    sort -T /tmp -k 14,14 -k 16,16n -k 17,17n u.*.psl m60* | uniq > /cluster/data/droAna1/bed/tblastn.dm1FB/blastDm1FB.psl

    ssh hgwdev
    cd /cluster/data/droAna1/bed/tblastn.dm1FB

    hgLoadPsl droAna1 blastDm1FB.psl

# End tblastn


# SWAP CHAINS FROM DM2, BUILD NETS ETC. (REDONE 5/23/05 angie)
# Originally done 3/2/05 -- redone (better params) 5/23/05.
    mkdir /cluster/data/droAna1/bed/blastz.dm2.swap
    cd /cluster/data/droAna1/bed/blastz.dm2.swap
    doBlastzChainNet.pl -swap /cluster/data/dm2/bed/blastz.droAna1/DEF \
      >& do.log &
    tail -f do.log
    # Add {chain,net}Dm2 to trackDb.ra if necessary.

# MAKE Drosophila Proteins track (DONE braney 06-30-05)
    ssh kk
    mkdir -p /cluster/data/droAna1/bed/tblastn.dm2FB
    cd /cluster/data/droAna1/bed/tblastn.dm2FB
    ls -1S /iscratch/i/droAna1/blastDb/*.nsq | sed "s/\.nsq//" > target.lst
    mkdir fbfa
    # calculate a reasonable number of jobs 
    calc `wc /cluster/data/dm2/bed/blat.dm2FB/dm2FB.psl|awk "{print \\\$1}"`/\(64630/`wc target.lst | awk "{print \\\$1}"`\)
# 18929/(64630/396) = 115.981495

    split -l 116 /cluster/data/dm2/bed/blat.dm2FB/dm2FB.psl fbfa/fb
    cd fbfa
    for i in *; do pslxToFa $i $i.fa; rm $i; done
    cd ..
    ls -1S fbfa/*.fa > fb.lst
    mkdir -p /cluster/bluearc/droAna1/bed/tblastn.dm2FB/blastOut  
    ln -s /cluster/bluearc/droAna1/bed/tblastn.dm2FB/blastOut  
    for i in `cat fb.lst`; do  mkdir blastOut/`basename $i .fa`; done
    tcsh
    cat << '_EOF_' > blastGsub
#LOOP
blastSome $(path1) {check in line $(path2)} {check out exists blastOut/$(root2)/q.$(root1).psl } 
#ENDLOOP
'_EOF_'
    cat << '_EOF_' > blastSome
#!/bin/sh
BLASTMAT=/iscratch/i/blast/data
export BLASTMAT
g=`basename $2`
f=/tmp/`basename $3`.$g
for eVal in 0.01 0.001 0.0001 0.00001 0.000001 1E-09 1E-11
do
if /scratch/blast/blastall -M BLOSUM80 -m 0 -F no -e $eVal -p tblastn -d $1 -i $2 -o $f.8
then
        mv $f.8 $f.1
        break;
fi
done
if test -f  $f.1
then
if /cluster/bin/i386/blastToPsl $f.1 $f.2
then
        liftUp -nosort -type=".psl" -pslQ -nohead $3.tmp /cluster/data/dm2/bed/blat.dm2FB/protein.lft warn $f.2
        mv $3.tmp $3
        rm -f $f.1 $f.2 $f.3 $f.4
        exit 0
    fi
fi
rm -f $f.1 $f.2 $3.tmp $f.3 $f.8 $f.4
exit 1
'_EOF_'

    chmod +x blastSome
    gensub2 target.lst fb.lst blastGsub blastSpec

    ssh kk
    cd /cluster/data/droAna1/bed/tblastn.dm2FB
    para create blastSpec
    para push

# Completed: 64944 of 64944 jobs
# CPU time in finished jobs:    1256574s   20942.91m   349.05h   14.54d  0.040 y
# IO & Wait Time:                376729s    6278.81m   104.65h    4.36d  0.012 y
# Average job time:                  25s       0.42m     0.01h    0.00d
# Longest finished job:            4272s      71.20m     1.19h    0.05d
# Submission to last job:         22769s     379.48m     6.32h    0.26d

    ssh kki
    cd /cluster/data/droAna1/bed/tblastn.dm2FB
    tcsh
    cat << '_EOF_' > chainGsub
#LOOP
chainSome $(path1)
#ENDLOOP
'_EOF_'

    cat << '_EOF_' > chainSome
(cd $1; cat q.*.psl | simpleChain -prot -outPsl -maxGap=25000 stdin ../c.`basename $1`.psl)
'_EOF_'
    chmod +x chainSome

    ls -1dS `pwd`/blastOut/fb?? > chain.lst
    gensub2 chain.lst single chainGsub chainSpec

    para create chainSpec
    para push
 
# Completed: 164 of 164 jobs
# CPU time in finished jobs:        332s       5.53m     0.09h    0.00d  0.000 y
# IO & Wait Time:                  2165s      36.09m     0.60h    0.03d  0.000 y
# Average job time:                  15s       0.25m     0.00h    0.00d
# Longest finished job:              58s       0.97m     0.02h    0.00d
# Submission to last job:           187s       3.12m     0.05h    0.00d

    cd /cluster/data/droAna1/bed/tblastn.dm2FB/blastOut
    for i in fb??
    do 
	awk "(\$13 - \$12)/\$11 > 0.6 {print}" c.$i.psl > c60.$i.psl
	sort -rn c60.$i.psl | pslUniq stdin u.$i.psl
	awk "((\$1 / \$11) ) > 0.60 { print   }" c60.$i.psl > m60.$i.psl
	echo $i
    done

    sort -u -T /tmp -k 14,14 -k 16,16n -k 17,17n u.*.psl m60* > /cluster/data/droAna1/bed/tblastn.dm2FB/blastDm2FB.psl
    cd ..

    ssh hgwdev
    cd /cluster/data/droAna1/bed/tblastn.dm2FB
    hgLoadPsl droAna1 blastDm2FB.psl
    exit

    # back to kksilo
    rm -rf blastOut

# End tblastn


# GENEID PREDICTIONS FROM IMIM (DONE 7/26/05 angie)
    ssh hgwdev
    mkdir /cluster/data/droAna1/bed/geneid
    cd /cluster/data/droAna1/bed/geneid
    wget http://genome.imim.es/genepredictions/D.ananassae/golden_path_200407/geneidv1.2/scaffolds.gtf
    ldHgGene -gtf -genePredExt droAna1 geneid *.gtf



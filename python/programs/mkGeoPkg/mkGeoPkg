#!/usr/bin/env python2.7

import sys, os, shutil, stat, argparse, datetime, hashlib

from ucscGb.gbData.ra.raFile import RaFile
from ucscGb.externalData.geo import submission
from ucscGb.externalData.geo import soft
from ucscGb.encode import encodeUtils
from ucscGb.encode.cv import CvFile
from ucscGb.encode.track import CompositeTrack, TrackFile


'''
mkGeoPkg - create a soft file and upload script for a given track, so that it
may be sumbitted to GEO.

To invoke the script, you must pass the composite and track name:
    mkGeoPkg hg19 wgEncodeSomeTrack
    
This is typically not enough however; most tracks are not completely covered
by their metadata, and it is necessary to supply additional information. The
most commonly needed information is:
    !Series_summary - this is taken from the track's html page description. 
        In most cases it can be copied, one paragraph per line.
    !Series_overall_design - this is taken from the Methods section on the
        track's page. As with summary, 1 paragraph per line.
    !Series_contributor - this is taken from the contributors list on the 
        track's page. It has a special format: "Last,First" where each person
        is listed on a separate line.
    !Sample_instrument_model - this is a bit more difficult, as it technically
        supposed to be a per-sample field. Occasionally this appears in the
        metaDb for newer tracks, if so, it's automatically added in. Otherwise
        it must be either specified on a whole-series basis, or added to the
        metadata. In many cases, we don't actually know all of them. This is
        okay. GEO will allow us to submit whatever information we do have, and
        they can take care of the rest. The instrumentModels dictionary below
        gives a list of the allowable entered values (the keys). The values
        map to the "human readable" version used by GEO.
        
You can supply all of the above information in an additional file and specify
it using the r (replace) option:
    mkGeoPkg -r somefile hg19 wgEncodeSomeTrack
    
The replace file must be organized with each of the above key value pairs as
in a soft file:
    !Series_summary = some summary stuff ...
    !Series_summary = another paragraph of summary ...
    !Series_overall_design = ...
    !Series_contributor = Researcher,Some
    !Series_contributor = Researcher,Another
    !Sample_instrument_model = Illumina_GA2
    
There is a template for this, named replaceTemplate in the directory.

You may need to only submit a part of the track, in this case you can specify
experiment ID numbers to include:

One problem you may run into while running the script is that the DataType is
not valid. This means that the huge dictionary called datatypes below isn't
filled in for that entry. If you can get ahold of the information, modify the
script and push the changes back out.

You may also get an error when trying to submit MicroArray data. This is to be
expected: MicroArray is currently not functional at all. We have no way as of
current to map our data to the format expected by GEO, so we've punted on this
issue for the time being.

Once you've successfully run the script, you'll have generated a soft file and
a script that will handle the uploading process. All of this will be put into
a directory named 'database_wgEncodeSomeTrack_year-month-day'. To begin the
upload, simply cd into the directoy and run upload.sh. This will start the
aspera copy program, copying files, a files list, and the soft file itself.

For each submission, you need to email GEO. Our current contact is:
    Steve Wilhite, wilhite@ncbi.nlm.nih.gov
    
You must specify which track you're submitting. GEO will only allow us 1TB of
space dedicated to ENCODE, so you must break down submissions larger than 1TB
and only submit as many submissions as they have room to process at any given
time. In a few days, GEO will get back to you with a list of accession numbers
which need to be put back into our metadata (see encodeAddGeoAccessions).
'''
        
def main():

    parser = argparse.ArgumentParser(description = 'Prepares a submission to GEO. Creates a soft file and shell script with the correct call to aspera.')
    parser.add_argument('-t', '--trackPath', help='Overrides the default track path ~/kent/src/hg/makeDb/trackDb/')
    parser.add_argument('-r', '--replace', help='Give the name of a file that has contents to be used to replace unspecified tags in metadata (description, contributers, etc) and instrument model')
    parser.add_argument('-a', '--audit', action='store_true', default=False, help='Instead of building the files, will just give you a list of errors')
    parser.add_argument('-b', '--byrep', action='store_true', default=False, help='Submit by replicate')
    parser.add_argument('-z', '--zip', help='Specifies a directory path to unzip tarred fastqs to, only applicable for tracks with tarred fastqs')
    parser.add_argument('-s', '--series', action='store_true', default=False, help='Only generates the series stanza, instead of generating the entire soft file')
    parser.add_argument('database', help='The database, typically hg19 or mm9')
    parser.add_argument('composite', help='The composite name, wgEncodeCshlLongRnaSeq for instance')
    parser.add_argument('expIds', nargs='*', help='Any number of expIds separated by spaces, you can also specify a range by using a hyphen, "140 150 160-170" for instance, or leave blank to specify the entire file')
    
    if len(sys.argv) == 1:
        parser.print_usage()
        return
    
    args = parser.parse_args(sys.argv[1:])
        
    compositeTrack = CompositeTrack(args.database, args.composite, args.trackPath)

    cvPath = compositeTrack.trackPath + 'cv/alpha/cv.ra'
    controlledVocab = CvFile(cvPath)
    
    if args.zip != None and not args.zip.endswith('/'):
        args.zip += '/'
    
    replace = dict()
    if args.replace != None:
        for line in open(args.replace):
            if line == '':
                continue
            key, val = map(str.strip, line.split('=', 1))
            if key not in replace:
                replace[key] = list()
            replace[key].append(val)
        
    tempids = list()
    ids = list()
    
    for id in args.expIds:
        if '-' in id:
            start, end = id.split('-', 1)
            tempids.extend(range(int(start), int(end) + 1))
        else:
            tempids.append(int(id))
    for id in tempids:
        if str(id) in compositeTrack.alphaMetaDb.experiments.keys():
            ids.append(int(id))

    expIds, expVars, geoMapping, series, datatype = soft.createMappings(compositeTrack.alphaMetaDb, False, args.byrep)
  
    submission = dict()
    if len(ids) == 0:
        submission = expIds
    else:
        for expId in ids:
            if str(expId) in expIds.keys():
                submission[str(expId)] = expIds[str(expId)]
    expIdStr = ' '
    for id in args.expIds:
        expIdStr = expIdStr + id + ',' 
    expIdStr = expIdStr[:len(expIdStr) - 1]
    print 'Generating soft using expIds ' + ','.join(submission.keys())
    
    if datatype.type == 'HighThroughput':
        softfile, fileList = soft.createHighThroughputSoftFile(compositeTrack, controlledVocab, submission, expVars, geoMapping, series, datatype, replace, args.audit, args.zip, args.series, rep=args.byrep)
    elif datatype.type == 'MicroArray':
        softfile, fileList = soft.createMicroArraySoftFile(compositeTrack, controlledVocab, submission, expVars, geoMapping, series, datatype, replace, args.audit, args.zip, args.series)
    else:
        raise KeyError('unsupported type ' + datatype.name)
    
    if not args.audit and not args.series:
        print 'Creating directory'
    
        d = datetime.datetime.today()
        datestring = '%4d-%02d-%02d' % (d.year, d.month, d.day)
        
        dirname = '%s_%s_%s/' % (compositeTrack.database, compositeTrack.name, datestring)
        linkdirname = '%s_%s/' % (compositeTrack.database, compositeTrack.name)
    
        os.mkdir(dirname)
        os.mkdir(dirname + linkdirname)
    
        print 'Writing file'
        
        outfileName = '%s%s_%s.soft' % (dirname + linkdirname, compositeTrack.database, compositeTrack.name)
        outfile = open(outfileName, 'w')
        outfile.write(str(softfile))
        fileslistname = '%sfiles.txt' % (dirname + linkdirname)
        fileslist = open(fileslistname, 'w')
        scriptname = '%supload.sh' % dirname
        outscript = open(scriptname, 'w')
        
        outscript.write('#!/bin/sh\n\n')
        outscript.write('/cluster/home/mmaddren/.aspera/connect/bin/ascp -i ~/encode_geo_key/encode_geo_key.ppk --symbolic-links=follow -QTdr -l300m %s asp-geo@upload.ncbi.nlm.nih.gov:ENCODE\n' % linkdirname)
        outscript.close()
    elif args.series:
        outfileName = '%s_%s.soft' % (compositeTrack.database, compositeTrack.name)
        outfile = open(outfileName, 'w')
        outfile.write(str(softfile))
        outfile.close()
        
    for file in fileList:
        if not os.path.exists(file.path):
            print IOError(file.path + ' does not exist')
        elif not args.audit:
            linkname = soft.linkName(file, compositeTrack)
            linkpath = linkdirname + linkname
            if os.path.exists(dirname + linkpath):
                print 'exists: ' + dirname + linkpath
            else:
                os.symlink(file.fullname, dirname + linkpath)
        
            #outscript.write(linkpath + ' \\\n')
            fileslist.write(linkname + '\n')
    
    if not args.audit and not args.series:
        #outscript.write()
        
        fileslist.close()

        os.system('chmod +x ' + scriptname)
        
        print 'Finished!'
    
if __name__ == '__main__':
    main()